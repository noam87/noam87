<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Wiki-mains on Noam&#39;s Website About Software</title>
    <link>http://noamswebsite.com/wiki-main/</link>
    <description>Recent content in Wiki-mains on Noam&#39;s Website About Software</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 12 Apr 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://noamswebsite.com/wiki-main/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Memory Accessing Alignment</title>
      <link>http://noamswebsite.com/wiki-main/computers/alignment/</link>
      <pubDate>Wed, 12 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>http://noamswebsite.com/wiki-main/computers/alignment/</guid>
      <description>For any data type that requires N bytes, its starting address should be a multiple of N. In most x86 processors the memory interface is designed to read/write blocks that are 8 or 16 bytes long2.
 Unaligned memory accesses occur when you try to read N bytes of data starting from an address that is not evenly divisible by N (i.e. addr % N != 0). For example, reading 4 bytes of data from address 0x10004 is fine, but reading 4 bytes of data from address 0x10005 would be an unaligned memory access 6.</description>
    </item>
    
    <item>
      <title>Science Resources</title>
      <link>http://noamswebsite.com/wiki-main/science/science_resources/</link>
      <pubDate>Wed, 12 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>http://noamswebsite.com/wiki-main/science/science_resources/</guid>
      <description>Biology    Title Format Notes     Robert Sapolsky: The Biology Of Human Behavior YouTube lecture series You are not in control.   Molecular Biology Of the Cell BOOK     Cancer    Title Format Notes     The Biology Of Cancer BOOK Comprehensive review of basic cancer biology up to latest cancer research. Assumes some knowledge of cell biology.</description>
    </item>
    
    <item>
      <title>Self-Employed Taxes (Canada) tl;dr</title>
      <link>http://noamswebsite.com/wiki-main/career/taxes_tldr/</link>
      <pubDate>Wed, 12 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>http://noamswebsite.com/wiki-main/career/taxes_tldr/</guid>
      <description>CPP CPP is payed at the end of the year. Save 6% of your gross income for this.
Income Taxes Payed at the end of the year. These are bracketed by income, but to make calculations simple I just keep a flat 29% of my monthly income.
HST If you are operating as a freelancer or small business and are expecting to make over \$30_000, register for an HST account here and charge the customer directly on top of net fee (13% in Ontario).</description>
    </item>
    
    <item>
      <title>Cool Articles / Papers</title>
      <link>http://noamswebsite.com/wiki-main/computers/cool_articles/</link>
      <pubDate>Tue, 11 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>http://noamswebsite.com/wiki-main/computers/cool_articles/</guid>
      <description>General    Title Format Notes     Build Your Own Text Editor HTML Really great tutorial (and introduction to C programming and terminal programming).   Data Structures For Text Sequences PDF    Handmade hero YouTube series Dude builds a complete release-quality video game from scratch in minimal subset of C++ before your very eyes.   Online Computer Science Courses With Video Lectures HTML (community git) Giant collection of free video lectures.</description>
    </item>
    
    <item>
      <title>Self-Employment Resources</title>
      <link>http://noamswebsite.com/wiki-main/career/startup_resources/</link>
      <pubDate>Wed, 18 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://noamswebsite.com/wiki-main/career/startup_resources/</guid>
      <description> Personal Finance (Will mostly apply to Canadians.)
   Title Format Notes     Make Sure It&amp;rsquo;s Deductable BOOK Must-have saving and tax tips for Canadian freelancers and small business owners.   Reddit: Personal Finance Canada HTML     Self-Employment / Remote Work    Title Format Notes     Awesome Remote Job HTML ; Git Community curated list of useful links    Startup Stuff    Title Format Notes     What I Wish I&amp;rsquo;d Known Before Joining A Unicorn HTML     </description>
    </item>
    
    <item>
      <title>Elixir/Erlang Resources</title>
      <link>http://noamswebsite.com/wiki-main/computers/elixir_resources/</link>
      <pubDate>Wed, 04 Jan 2017 16:11:51 -0500</pubDate>
      
      <guid>http://noamswebsite.com/wiki-main/computers/elixir_resources/</guid>
      <description>Learning    Title Notes     Elixir In Action (book) My go-to recommendation for getting started with Elixir.   Writing A Blog Engine in Phoenix Great first tutorial for Phoenix framework   Erlang In Anger Great guide for when stuff goes bad.    Memory / GC For articles on GC / compilers in general see compilers section.
   Title Notes     Erlang Scheduler Details and Why It Matters    Erlang Garbage Collection Details and Why It Matters Simple introduction to Erlang GC concepts.</description>
    </item>
    
    <item>
      <title>React Resources</title>
      <link>http://noamswebsite.com/wiki-main/computers/react_resources/</link>
      <pubDate>Wed, 04 Jan 2017 14:41:18 -0500</pubDate>
      
      <guid>http://noamswebsite.com/wiki-main/computers/react_resources/</guid>
      <description>   Title Format Notes     A Comprehensive Guide to Test-First Development with Redux, React, and Immutable tutorial Great comprehensive introduction to the whole ecosystem.   Redux, Re-fram, Relay, Om/next, oh my! video    Setting Up Absinthe Relay In Elixir      </description>
    </item>
    
    <item>
      <title>Math/ML Resources</title>
      <link>http://noamswebsite.com/wiki-main/ml/ml_resources/</link>
      <pubDate>Wed, 04 Jan 2017 11:05:23 -0500</pubDate>
      
      <guid>http://noamswebsite.com/wiki-main/ml/ml_resources/</guid>
      <description>Math    Title Format Notes     Probability Through Problems PDF ; BOOK Best introductory probability book out there. Learn by discovering!   Principles And Techniques In Combinatorics BOOK ; PDF Beautiful book: simple, clear explanations, no filler, challenging problems    Computer Science    Title Format Notes     Information Theory And Coding YouTube Lectures    Elements Of Information Theory (2nd Ed.</description>
    </item>
    
    <item>
      <title>Separate Ecto From Phoenix In Umbrella App</title>
      <link>http://noamswebsite.com/wiki-main/computers/phoenix_no_ecto/</link>
      <pubDate>Wed, 04 Jan 2017 00:52:25 -0500</pubDate>
      
      <guid>http://noamswebsite.com/wiki-main/computers/phoenix_no_ecto/</guid>
      <description>First, create umbrella application:
$ mix new --umbrella my_app $ cd my_app/apps  Next create Phoenix app, excluding Ecto:
$ mix phoenix.new web --no-ecto  Now we create a new mix project for Ecto, with supervision tree:
$ mix new db --sup  Finally we need to set up some configuration files.
Setting Up Db Project $ cd db  First in the db project (following the getting started docs for Ecto:</description>
    </item>
    
    <item>
      <title>Using The Same bashrc / zshrc Across Computers</title>
      <link>http://noamswebsite.com/wiki-main/computers/sync_bashrc/</link>
      <pubDate>Wed, 04 Jan 2017 00:19:02 -0500</pubDate>
      
      <guid>http://noamswebsite.com/wiki-main/computers/sync_bashrc/</guid>
      <description>Here is a simple method I use to share the same .bashrc / .zshrc / .bash_profile on multiple computers, while still retaining unique settings where I need them.
Suppose you want some special setting to apply only to your linux laptop, but not to your mac laptop.
$ mkdir ~/configs $ touch ~/.is_linux  Next:
if [ -f &#39;.is_linux&#39; ]; then echo &amp;quot;This message only shows on my Linux laptops!&amp;quot; fi  Now with different config files you can configure different environments from is single universal *rc file you keep in a dotfiles repo.</description>
    </item>
    
    <item>
      <title>Ecto Callbacks Macro</title>
      <link>http://noamswebsite.com/wiki-main/computers/ecto_callbacks/</link>
      <pubDate>Sat, 22 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>http://noamswebsite.com/wiki-main/computers/ecto_callbacks/</guid>
      <description>Ecto callbacks (before/after) commit hooks have been deprecated, for a general good reason. Using callbacks is generally bad and you should never do it. But sometimes you need to do it because real life.
I wrote this macro this afternoon that implements both atomic and non-atomic callbacks. Here it is in all its glory. I won&amp;rsquo;t make it a hex package because it&amp;rsquo;s probably a bad thing to do.</description>
    </item>
    
    <item>
      <title>Sorting By Relative Popularity</title>
      <link>http://noamswebsite.com/wiki-main/ml/sorting_by_relative_popularity/</link>
      <pubDate>Tue, 08 Dec 2015 17:45:08 -0500</pubDate>
      
      <guid>http://noamswebsite.com/wiki-main/ml/sorting_by_relative_popularity/</guid>
      <description>&lt;p&gt;Hey, looks like I&amp;rsquo;m sorting user content again! &lt;a href=&#34;https://noamswebsite.wordpress.com/2014/01/23/sorting-posts-by-user-engagement-level-with-elasticsearch-implementation/&#34;&gt;last time&lt;/a&gt;, I sorted user posts by &amp;ldquo;interestingness&amp;rdquo;; this time around I&amp;rsquo;ll be sorting players from a set of sports teams. Once again we&amp;rsquo;ll look at why sorting things based on popularity alone is a bad idea, we&amp;rsquo;ll get a primer on standard deviation, and finally a bit of scripting to put it all together.&lt;/p&gt;

&lt;h3 id=&#34;the-task&#34;&gt;The Task&lt;/h3&gt;

&lt;p&gt;To drive up user engagementÂ at &lt;a href=&#34;http://www.thescore.com/&#34; target=&#34;_blank&#34;&gt;theScore&lt;/a&gt;, we introduced an onboarding screen that&amp;rsquo;s shown when you open the app for the first time.&lt;/p&gt;

&lt;p&gt;First, you get a list of sports teams that are popular in your area, and the option to subscribe to some of them.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://noamswebsite.com/img/team_select.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Now based on the teams you choose, it would be nice to also recommend some players for you to follow. So how would one go about choosing which players to recommend out of all those teams?&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s assume we have three six-player teams, where each player has the following number of subscribers:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;big_team_1:

  1. 100 000
  2. 110 000
  3. 90 000
  4. 80 500
  5. 140 000
  6. 140 500


big_team_2:

  1. 120 000
  2. 250 000
  3. 180 000
  4. 135 000
  5. 157 000
  6. 202 000


small_team:

  1. 3 000
  2. 100
  3. 234
  4. 301
  5. 250
  6. 400
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now let&amp;rsquo;s consider some properties we want from our algorithm:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;A compute-once, static value:&lt;/strong&gt; we don&amp;rsquo;t want to run our algorithm on every user. We want to give each player in our database a static &lt;code&gt;recommendation_score&lt;/code&gt;; a numeric value that is cheap to index.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Simple:&lt;/strong&gt; the algorithm should be simple and use elementary methods. Recommending players is a small part of the app; there should be little code maintenance involved.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Variety:&lt;/strong&gt; The purpose of the onboarding process is to get you engaged, so we want to recommend a variety of players from different sports and leagues.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;the-naive-approach&#34;&gt;The Naive Approach&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; I will be using the &lt;a href=&#34;http://julialang.org/&#34; target=&#34;_blank&#34;&gt;Julia programming language&lt;/a&gt; for all my examples.Â You can find the complete implementation at the bottom of this post.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The first obvious solution is to simply sort players by their &lt;code&gt;subscription_count&lt;/code&gt;. The more popular the player, the more recommendable he is. Here is our naive sorting function:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function naive_sort(teams)
  Base.sort(
    [[team.players for team in teams]...],
    by=x -&amp;gt; x.subscribers,
    rev=true
  )[1:5]
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which yields:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;5-element Array{PlayerRecommender.Player,1}:
  Big Team 2 Player | subscribers: 250000
  Big Team 2 Player | subscribers: 202000
  Big Team 2 Player | subscribers: 180000
  Big Team 2 Player | subscribers: 157000
  Big Team 1 Player | subscribers: 140500
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The problem with this approach is that we only get results from the most popular teams. So if you&amp;rsquo;re a fan of both a very popular NFL team and another team that is not as popular (your local basketball team, perhaps), even the least popular player from the NFL team will be recommended to you, whereas the most popular player from your favorite local basketball team will not show up in your list at all!&lt;/p&gt;

&lt;h3 id=&#34;a-better-approach&#34;&gt;A Better Approach&lt;/h3&gt;

&lt;p&gt;What are we really looking for?&lt;/p&gt;

&lt;p&gt;Well, I think the players we want to recommend are the not necessarily the ones who are most famous, but rather, the ones who are most popular &lt;em&gt;compared to the rest of their team&lt;/em&gt;, regardless of how popular that teams is (we already know you&amp;rsquo;re a fan of the team or you wouldn&amp;rsquo;t have subscribed to it in the first place).&lt;/p&gt;

&lt;p&gt;In other words, we want an algorithm that answers the following question:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Which players &lt;em&gt;deviate&lt;/em&gt; the most in popularity from the rest of their team?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Luckily, there&amp;rsquo;s a mathematical tool for figuring out just this: &lt;a href=&#34;https://en.wikipedia.org/wiki/Standard_deviation&#34; target=&#34;_blank&#34;&gt;standard deviation&lt;/a&gt;.&lt;/p&gt;

&lt;hr&gt;

&lt;h4 id=&#34;standard-deviation-tl-dr&#34;&gt;Standard Deviation tl;dr&lt;/h4&gt;

&lt;p&gt;Standard deviation is a pretty straight-forward concept: Take a set of values, and figure out the average value for that set (also known as theÂ &lt;em&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Arithmetic_mean&#34; target=&#34;_blank&#34;&gt;arithmetic mean&lt;/a&gt;&lt;/em&gt;). The standard deviation simply tells us by how much the value of the typical element in our set deviates from the average.&lt;/p&gt;

&lt;p&gt;The mathematical representation of this calculation is:&lt;/p&gt;

&lt;p&gt;$$ s_N = \sqrt{\frac{1}{N} \sum_{i=1}^N (x_i - \overline{x})^2} $$&lt;/p&gt;

&lt;p&gt;Where $N$ is the population size, and $\overline{x}$ is the arithmetic mean, which itself is represented by:&lt;/p&gt;

&lt;p&gt;$$ \overline{x}_N = \frac{1}{N}\sum_{i=1}^{N} a_i $$&lt;/p&gt;

&lt;p&gt;For example, the following two sets have the same average value, but clearly the values are spread out differently:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;close_to_average = [11,8,9,12]
spread_out = [0,1,19,20]

average(close_to_average) == 10
average(spread_out) == 10

standard_deviation(close_to_average) == 1.59
standard_deviation(spread_out) == 9.51
&lt;/code&gt;&lt;/pre&gt;

&lt;hr&gt;

&lt;p&gt;Thus we arrive at our simple scoring function. All we need to do is find players whose deviation from the average is substantially higher than that of their teammates:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function recommend(player, team)
  player_dev = player.subscribers - team.average
  if player_dev == 0
    player.recommendation_score = 0
  else
    player.recommendation_score = player_dev / team.std_dev
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using this scoring function on our original teams, we get the following results:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;5-element Array{PlayerRecommender.Player,1}:
 Small Team Player | subscribers: 3000 | score: 2.2276261544470644
 Big Team 2 Player | subscribers: 250000 | score: 1.749555170961297
 Big Team 1 Player | subscribers: 140500 | score: 1.3134034577576315
 Big Team 1 Player | subscribers: 140000 | score: 1.291753950212176
 Big Team 2 Player | subscribers: 202000 | score: 0.6445729577225832
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Much better. This time around, our top player actually has the least number of subscribers, but this makes sense, because even though he belongs to a team that is not very popular, his subscription count is tenfold that of his teammates; clearly someone to keep an eye on! (perhaps a rising star in a college league? Certainly wouldn&amp;rsquo;t want our recommendation script to ignore that one.)&lt;/p&gt;

&lt;h3 id=&#34;limitations&#34;&gt;Limitations&lt;/h3&gt;

&lt;p&gt;This algorithm has many limitations.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;New players won&amp;rsquo;t be very well represented (they will by nature have low subscription counts).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;All-star teams might result in nobody being particularly recommendable. Though this one might be less of a problem: thanks to our good ol&amp;rsquo; friend the &lt;a href=&#34;https://en.wikipedia.org/wiki/Gaussian_function&#34;&gt;bell curve&lt;/a&gt;, even among rare anomalies, there are &lt;a href=&#34;http://fivethirtyeight.com/features/lionel-messi-is-impossible/&#34; target=&#34;_blank&#34;&gt;rare anomalies&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While there are ways to address these limitations and improve the accuracy of the algorithm (for example, taking into account the rate of change in &lt;code&gt;subscription_count&lt;/code&gt;), one has to remember the purpose of this feature: to drive up user engagement during onboarding. Is the added complexity of such changes worth the minimal improvement in the recommendations?&lt;/p&gt;

&lt;p&gt;Point is, it&amp;rsquo;s Friday night and I should go out for a beer now. I&amp;rsquo;m also looking forward to testing out the enormous Chinese fermentation jug I bought yesterday. It looks something like this, but a LOT bigger:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://noamswebsite.com/img/ferm_crock.jpeg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;And it was only \$30. What a bargain.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Here is the code used in these examples (working as of Julia 0.4.1). Our actual code at theScore is in Ruby.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Eigengoogle: How the Google PageRank Algorithm Works</title>
      <link>http://noamswebsite.com/wiki-main/ml/eigengoogle/</link>
      <pubDate>Mon, 27 Jan 2014 18:06:24 -0500</pubDate>
      
      <guid>http://noamswebsite.com/wiki-main/ml/eigengoogle/</guid>
      <description>While we&amp;rsquo;re on the subject of sorting things online, we might as well talk about Google: the 93-billion dollar company whose main export is taking all the things ever and putting them in the right order. If there&amp;rsquo;s one thing Google knows best, it&amp;rsquo;s sorting stuff.
I was curious how it all works, and it turned out really interesting, plus I got to learn a bit about Markov chains. It all starts with an algorithm called PageRank1.</description>
    </item>
    
    <item>
      <title>Sorting Posts by User Engagement Level</title>
      <link>http://noamswebsite.com/wiki-main/computers/user_eng/</link>
      <pubDate>Thu, 23 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>http://noamswebsite.com/wiki-main/computers/user_eng/</guid>
      <description>At Functional Imperative we&amp;rsquo;re building the new CanLII Connects website (a social portal for Canada&amp;rsquo;s largest database of legal cases), and this week I was given the task of figuring out a sensible way of sorting posts.
Figuring out how to sort user-generated content is a common problem that many social websites face.
Here&amp;rsquo;s Reddit&amp;rsquo;s scoring equation for &amp;lsquo;Best&amp;rsquo; (source and explanation):
Not all scoring equations are that hairy, here are a few more.</description>
    </item>
    
    <item>
      <title>Amdahl&#39;s Law</title>
      <link>http://noamswebsite.com/wiki-main/computers/amdahls_law/</link>
      <pubDate>Sat, 05 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>http://noamswebsite.com/wiki-main/computers/amdahls_law/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;As multicore computing becomes the norm (even my phone is dual core!), it&amp;rsquo;s important to understand the benefits and also the limitations of concurrency. Amdahl&amp;rsquo;s Law addresses the latter.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let&amp;rsquo;s imagine a simple program. It prints &amp;ldquo;Hello World&amp;rdquo; 100 times, then quits.&lt;/p&gt;

&lt;p&gt;Our first version of the program is written as a single sequential task: it prints one &amp;ldquo;Hello World&amp;rdquo;, then another, then another, 100 times, then quits.  This program takes some unit of time, $t$ to execute.&lt;/p&gt;

&lt;p&gt;Now say we have a dual-core machine at hand. (My phone, perhaps).&lt;/p&gt;

&lt;p&gt;Cool, now we can spawn &lt;em&gt;two&lt;/em&gt; tasks that print &amp;ldquo;Hello World&amp;rdquo; 50 times each. And, because our magical imaginary computer experiences no overhead, it takes us exactly $\frac{ t }{ 2 }$ units of time to run our second program.&lt;/p&gt;

&lt;p&gt;So we keep adding more and more processors, until we have 100 concurrent threads printing one &amp;ldquo;Hello World&amp;rdquo; each, and our program runs 100 times faster.&lt;/p&gt;

&lt;p&gt;At this point we stop: &amp;ldquo;Ah, the trend is clear: more processors equals more speed! No point in continuing this experiment.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A naive (wrong) first guess:&lt;/strong&gt; Given $n$ processors executing a program, the maximum boost in speed is $n$. (That is, we can get our program to run $n$ times faster).&lt;/p&gt;

&lt;p&gt;Cool! This means that, given enough processors, we could make &lt;em&gt;any&lt;/em&gt; program run almost instantly. Right?&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://noamswebsite.com/img/more_cores.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;(&lt;a href=&#34;http://forums.pureoverclock.com/amd/21809-rumor-mill-amd-iv-x12-170-12-cores-24mb-cache-6ghz-2.html#post169754&#34;&gt;Pic original source&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Of course this is not the case! Enough daydreaming. Let&amp;rsquo;s figure out a more  realistic estimate.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rice&#39;s Theorem</title>
      <link>http://noamswebsite.com/wiki-main/computers/rices_theorem/</link>
      <pubDate>Tue, 16 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>http://noamswebsite.com/wiki-main/computers/rices_theorem/</guid>
      <description>Rice&amp;rsquo;s theorem can be stated thus:
 Every non-trivial semantic property of a program is undecidable.
 Before we prove the theorem, let&amp;rsquo;s break down that statement:
&amp;ldquo;Semantic Property&amp;rdquo; A ssemantic property is a property of the language, not the machine that is computing it. For example, this is a semantic property of a language:
 All strings in language $L$ are of the form $1^n0^n$.  This is not a semantic property:</description>
    </item>
    
  </channel>
</rss>