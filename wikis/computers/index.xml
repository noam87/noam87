<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Computers on Noam&#39;s Website About Software</title>
    <link>http://noamswebsite.com/wikis/computers/</link>
    <description>Recent content in Computers on Noam&#39;s Website About Software</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 12 Apr 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://noamswebsite.com/wikis/computers/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Memory Accessing Alignment</title>
      <link>http://noamswebsite.com/wiki-main/computers/alignment/</link>
      <pubDate>Wed, 12 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>http://noamswebsite.com/wiki-main/computers/alignment/</guid>
      <description>For any data type that requires N bytes, its starting address should be a multiple of N. In most x86 processors the memory interface is designed to read/write blocks that are 8 or 16 bytes long2.
 Unaligned memory accesses occur when you try to read N bytes of data starting from an address that is not evenly divisible by N (i.e. addr % N != 0). For example, reading 4 bytes of data from address 0x10004 is fine, but reading 4 bytes of data from address 0x10005 would be an unaligned memory access 6.</description>
    </item>
    
    <item>
      <title>Computer Science Articles / Books</title>
      <link>http://noamswebsite.com/wiki-main/computers/cool_articles/</link>
      <pubDate>Tue, 11 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>http://noamswebsite.com/wiki-main/computers/cool_articles/</guid>
      <description>General    Title Format Notes     Build Your Own Text Editor HTML Really great tutorial (and introduction to C programming and terminal programming).   Data Structures For Text Sequences PDF    Handmade hero YouTube series Dude builds a complete release-quality video game from scratch in minimal subset of C++ before your very eyes.   Online Computer Science Courses With Video Lectures HTML (community git) Giant collection of free video lectures.</description>
    </item>
    
    <item>
      <title>Elixir/Erlang Resources</title>
      <link>http://noamswebsite.com/wiki-main/computers/elixir_resources/</link>
      <pubDate>Wed, 04 Jan 2017 16:11:51 -0500</pubDate>
      
      <guid>http://noamswebsite.com/wiki-main/computers/elixir_resources/</guid>
      <description>Learning    Title Notes     Elixir In Action (book) My go-to recommendation for getting started with Elixir.   Writing A Blog Engine in Phoenix Great first tutorial for Phoenix framework   Erlang In Anger Great guide for when stuff goes bad.    Memory / GC For articles on GC / compilers in general see compilers section.
   Title Notes     Erlang Scheduler Details and Why It Matters    Erlang Garbage Collection Details and Why It Matters Simple introduction to Erlang GC concepts.</description>
    </item>
    
    <item>
      <title>React Resources</title>
      <link>http://noamswebsite.com/wiki-main/computers/react_resources/</link>
      <pubDate>Wed, 04 Jan 2017 14:41:18 -0500</pubDate>
      
      <guid>http://noamswebsite.com/wiki-main/computers/react_resources/</guid>
      <description>   Title Format Notes     A Comprehensive Guide to Test-First Development with Redux, React, and Immutable tutorial Great comprehensive introduction to the whole ecosystem.   Redux, Re-fram, Relay, Om/next, oh my! video    Setting Up Absinthe Relay In Elixir      </description>
    </item>
    
    <item>
      <title>Separate Ecto From Phoenix In Umbrella App</title>
      <link>http://noamswebsite.com/wiki-main/computers/phoenix_no_ecto/</link>
      <pubDate>Wed, 04 Jan 2017 00:52:25 -0500</pubDate>
      
      <guid>http://noamswebsite.com/wiki-main/computers/phoenix_no_ecto/</guid>
      <description>First, create umbrella application:
$ mix new --umbrella my_app $ cd my_app/apps  Next create Phoenix app, excluding Ecto:
$ mix phoenix.new web --no-ecto  Now we create a new mix project for Ecto, with supervision tree:
$ mix new db --sup  Finally we need to set up some configuration files.
Setting Up Db Project $ cd db  First in the db project (following the getting started docs for Ecto:</description>
    </item>
    
    <item>
      <title>Using The Same bashrc / zshrc Across Computers</title>
      <link>http://noamswebsite.com/wiki-main/computers/sync_bashrc/</link>
      <pubDate>Wed, 04 Jan 2017 00:19:02 -0500</pubDate>
      
      <guid>http://noamswebsite.com/wiki-main/computers/sync_bashrc/</guid>
      <description>Here is a simple method I use to share the same .bashrc / .zshrc / .bash_profile on multiple computers, while still retaining unique settings where I need them.
Suppose you want some special setting to apply only to your linux laptop, but not to your mac laptop.
$ mkdir ~/configs $ touch ~/.is_linux  Next:
if [ -f &#39;.is_linux&#39; ]; then echo &amp;quot;This message only shows on my Linux laptops!&amp;quot; fi  Now with different config files you can configure different environments from is single universal *rc file you keep in a dotfiles repo.</description>
    </item>
    
    <item>
      <title>Ecto Callbacks Macro</title>
      <link>http://noamswebsite.com/wiki-main/computers/ecto_callbacks/</link>
      <pubDate>Sat, 22 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>http://noamswebsite.com/wiki-main/computers/ecto_callbacks/</guid>
      <description>Ecto callbacks (before/after) commit hooks have been deprecated, for a general good reason. Using callbacks is generally bad and you should never do it. But sometimes you need to do it because real life.
I wrote this macro this afternoon that implements both atomic and non-atomic callbacks. Here it is in all its glory. I won&amp;rsquo;t make it a hex package because it&amp;rsquo;s probably a bad thing to do.</description>
    </item>
    
    <item>
      <title>Amdahl&#39;s Law</title>
      <link>http://noamswebsite.com/wiki-main/computers/amdahls_law/</link>
      <pubDate>Sat, 05 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>http://noamswebsite.com/wiki-main/computers/amdahls_law/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;As multicore computing becomes the norm (even my phone is dual core!), it&amp;rsquo;s important to understand the benefits and also the limitations of concurrency. Amdahl&amp;rsquo;s Law addresses the latter.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let&amp;rsquo;s imagine a simple program. It prints &amp;ldquo;Hello World&amp;rdquo; 100 times, then quits.&lt;/p&gt;

&lt;p&gt;Our first version of the program is written as a single sequential task: it prints one &amp;ldquo;Hello World&amp;rdquo;, then another, then another, 100 times, then quits.  This program takes some unit of time, $t$ to execute.&lt;/p&gt;

&lt;p&gt;Now say we have a dual-core machine at hand. (My phone, perhaps).&lt;/p&gt;

&lt;p&gt;Cool, now we can spawn &lt;em&gt;two&lt;/em&gt; tasks that print &amp;ldquo;Hello World&amp;rdquo; 50 times each. And, because our magical imaginary computer experiences no overhead, it takes us exactly $\frac{ t }{ 2 }$ units of time to run our second program.&lt;/p&gt;

&lt;p&gt;So we keep adding more and more processors, until we have 100 concurrent threads printing one &amp;ldquo;Hello World&amp;rdquo; each, and our program runs 100 times faster.&lt;/p&gt;

&lt;p&gt;At this point we stop: &amp;ldquo;Ah, the trend is clear: more processors equals more speed! No point in continuing this experiment.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A naive (wrong) first guess:&lt;/strong&gt; Given $n$ processors executing a program, the maximum boost in speed is $n$. (That is, we can get our program to run $n$ times faster).&lt;/p&gt;

&lt;p&gt;Cool! This means that, given enough processors, we could make &lt;em&gt;any&lt;/em&gt; program run almost instantly. Right?&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://noamswebsite.com/img/more_cores.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;(&lt;a href=&#34;http://forums.pureoverclock.com/amd/21809-rumor-mill-amd-iv-x12-170-12-cores-24mb-cache-6ghz-2.html#post169754&#34;&gt;Pic original source&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Of course this is not the case! Enough daydreaming. Let&amp;rsquo;s figure out a more  realistic estimate.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rice&#39;s Theorem</title>
      <link>http://noamswebsite.com/wiki-main/computers/rices_theorem/</link>
      <pubDate>Tue, 16 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>http://noamswebsite.com/wiki-main/computers/rices_theorem/</guid>
      <description>Rice&amp;rsquo;s theorem can be stated thus:
 Every non-trivial semantic property of a program is undecidable.
 Before we prove the theorem, let&amp;rsquo;s break down that statement:
&amp;ldquo;Semantic Property&amp;rdquo; A ssemantic property is a property of the language, not the machine that is computing it. For example, this is a semantic property of a language:
 All strings in language $L$ are of the form $1^n0^n$.  This is not a semantic property:</description>
    </item>
    
  </channel>
</rss>